name: CI
on:
  push:
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 6 * * 6'
jobs:
  job1:
    name: 'Ubuntu 18.04: SFML 2.5.1, Crystal nightly'
    runs-on: ubuntu-18.04
    steps:
      - name: Download CrSFML source
        uses: actions/checkout@v2
      - name: Install packages
        run: |
          sudo apt-get -q update
          sudo apt-get -qy install cmake libflac-dev libfreetype6-dev libgl1-mesa-dev libopenal-dev libudev-dev libvorbis-dev libx11-dev libxrandr-dev xvfb
      - name: Install Crystal
        uses: oprypin/install-crystal@v1
        with:
          crystal: nightly
      - name: Cache SFML
        id: cache-sfml
        uses: actions/cache@v1
        with:
          path: sfml
          key: sfml-2_5_1-ubuntu-v4
      - name: Download SFML source
        if: steps.cache-sfml.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: SFML/SFML
          ref: 2.5.1
          path: sfml
      - name: Build SFML
        if: steps.cache-sfml.outputs.cache-hit != 'true'
        working-directory: ./sfml
        run: |
          cmake . -DCMAKE_BUILD_TYPE=Release
          cmake --build .
      - name: Re-generate sources
        run: crystal generate.cr "$GITHUB_WORKSPACE/sfml/include"
      - name: Build CrSFML
        run: SFML_INCLUDE_DIR="$GITHUB_WORKSPACE/sfml/include" make -j
      - name: Validate freshness of generated files
        run: git diff --exit-code
      - name: Generate docs
        run: crystal doc
      - name: Start virtual display
        run: Xvfb :99 -screen 0 1024x768x24 +extension GLX &
      - name: Run tests
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 crystal spec
      - name: Build example "simple"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build simple.cr
      - name: Build example "flippy_bird"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build flippy_bird.cr
      - name: Build example "snakes"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build snakes.cr
      - name: Build example "transformable"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build transformable.cr
      - name: Build example "text_input"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build text_input.cr
      - name: Build example "diagnostics"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build diagnostics.cr
      - name: Build example "sound_capture"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build sound_capture.cr
      - name: Build example "shader"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build shader.cr
      - name: Build example "shapes"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build shapes.cr
      - name: Build example "gl"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build gl.cr
      - name: Build example "echo"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build echo.cr
      - name: Run example "simple"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./simple & pid=$!
          sleep 3
          kill $pid
      - name: Run example "flippy_bird"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./flippy_bird & pid=$!
          sleep 3
          kill $pid
      - name: Run example "snakes"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./snakes & pid=$!
          sleep 3
          kill $pid
      - name: Run example "transformable"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./transformable & pid=$!
          sleep 3
          kill $pid
      - name: Run example "text_input"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./text_input & pid=$!
          sleep 3
          kill $pid
      - name: Run example "diagnostics"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./diagnostics & pid=$!
          sleep 3
          kill $pid
      - name: Run example "shader"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./shader & pid=$!
          sleep 3
          kill $pid
      - name: Run example "shapes"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./shapes & pid=$!
          sleep 3
          kill $pid
      - name: Run example "gl"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" DISPLAY=:99.0 ./gl & pid=$!
          sleep 3
          kill $pid
      - name: Stop virtual display
        run: killall Xvfb
        if: always()
  job2:
    name: 'Ubuntu 16.04: SFML 2.3.2, Crystal 0.25.1'
    runs-on: ubuntu-16.04
    container: crystallang/crystal:0.25.1
    steps:
      - name: Download CrSFML source
        uses: actions/checkout@v2
      - name: Install packages
        run: |
          apt-get -q update
          apt-get -qy install libsfml-dev xvfb
      - name: Re-generate sources
        run: crystal generate.cr
      - name: Build CrSFML
        run: make -j
      - name: Generate docs
        run: crystal doc
      - name: Start virtual display
        run: Xvfb :99 -screen 0 1024x768x24 +extension GLX &
      - name: Run tests
        run: DISPLAY=:99.0 crystal spec
      - name: Build example "simple"
        working-directory: ./examples
        run: crystal build simple.cr
      - name: Build example "flippy_bird"
        working-directory: ./examples
        run: crystal build flippy_bird.cr
      - name: Build example "snakes"
        working-directory: ./examples
        run: crystal build snakes.cr
      - name: Build example "transformable"
        working-directory: ./examples
        run: crystal build transformable.cr
      - name: Build example "text_input"
        working-directory: ./examples
        run: crystal build text_input.cr
      - name: Build example "diagnostics"
        working-directory: ./examples
        run: crystal build diagnostics.cr
      - name: Build example "sound_capture"
        working-directory: ./examples
        run: crystal build sound_capture.cr
      - name: Build example "shader"
        working-directory: ./examples
        run: crystal build shader.cr
      - name: Build example "shapes"
        working-directory: ./examples
        run: crystal build shapes.cr
      - name: Build example "gl"
        working-directory: ./examples
        run: crystal build gl.cr
      - name: Build example "echo"
        working-directory: ./examples
        run: crystal build echo.cr
  job3:
    name: 'macOS: SFML 2.5.1, Crystal latest'
    runs-on: macos-latest
    steps:
      - name: Download CrSFML source
        uses: actions/checkout@v2
      - name: Install packages
        run: brew install flac freetype jpeg libogg libvorbis
      - name: Install Crystal
        uses: oprypin/install-crystal@v1
        with:
          crystal: latest
      - name: Cache SFML
        id: cache-sfml
        uses: actions/cache@v1
        with:
          path: sfml
          key: sfml-2_5_1-macos-v4
      - name: Download SFML source
        if: steps.cache-sfml.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: SFML/SFML
          ref: 2.5.1
          path: sfml
      - name: Build SFML
        if: steps.cache-sfml.outputs.cache-hit != 'true'
        working-directory: ./sfml
        run: |
          cmake . -DCMAKE_BUILD_TYPE=Release
          cmake --build .
      - name: Re-generate sources
        run: crystal generate.cr "$GITHUB_WORKSPACE/sfml/include"
      - name: Build CrSFML
        run: SFML_INCLUDE_DIR="$GITHUB_WORKSPACE/sfml/include" make -j
      - name: Validate freshness of generated files
        run: git diff --exit-code
      - name: Generate docs
        run: crystal doc
      - name: Build example "simple"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build simple.cr
      - name: Build example "flippy_bird"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build flippy_bird.cr
      - name: Build example "snakes"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build snakes.cr
      - name: Build example "transformable"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build transformable.cr
      - name: Build example "text_input"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build text_input.cr
      - name: Build example "diagnostics"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build diagnostics.cr
      - name: Build example "sound_capture"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build sound_capture.cr
      - name: Build example "shader"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build shader.cr
      - name: Build example "shapes"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build shapes.cr
      - name: Build example "gl"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build gl.cr
      - name: Build example "echo"
        working-directory: ./examples
        run: LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" crystal build echo.cr
      - name: Run example "simple"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" ./simple & pid=$!
          sleep 3
          kill $pid
      - name: Run example "flippy_bird"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" ./flippy_bird & pid=$!
          sleep 3
          kill $pid
      - name: Run example "transformable"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" ./transformable & pid=$!
          sleep 3
          kill $pid
      - name: Run example "text_input"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" ./text_input & pid=$!
          sleep 3
          kill $pid
      - name: Run example "shader"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" ./shader & pid=$!
          sleep 3
          kill $pid
      - name: Run example "gl"
        working-directory: ./examples
        run: |
          LD_LIBRARY_PATH="$GITHUB_WORKSPACE/sfml/lib" ./gl & pid=$!
          sleep 3
          kill $pid
  job4:
    name: 'macOS: SFML Homebrew, Crystal Homebrew'
    runs-on: macos-latest
    steps:
      - name: Download CrSFML source
        uses: actions/checkout@v2
      - name: Install packages
        run: brew install crystal sfml
      - name: Re-generate sources
        run: crystal generate.cr /usr/local/include
      - name: Build CrSFML
        run: SFML_INCLUDE_DIR=/usr/local/include make -j
      - name: Generate docs
        run: crystal doc
      - name: Run tests
        run: crystal spec
      - name: Build example "simple"
        working-directory: ./examples
        run: crystal build simple.cr
      - name: Build example "flippy_bird"
        working-directory: ./examples
        run: crystal build flippy_bird.cr
      - name: Build example "snakes"
        working-directory: ./examples
        run: crystal build snakes.cr
      - name: Build example "transformable"
        working-directory: ./examples
        run: crystal build transformable.cr
      - name: Build example "text_input"
        working-directory: ./examples
        run: crystal build text_input.cr
      - name: Build example "diagnostics"
        working-directory: ./examples
        run: crystal build diagnostics.cr
      - name: Build example "sound_capture"
        working-directory: ./examples
        run: crystal build sound_capture.cr
      - name: Build example "shader"
        working-directory: ./examples
        run: crystal build shader.cr
      - name: Build example "shapes"
        working-directory: ./examples
        run: crystal build shapes.cr
      - name: Build example "gl"
        working-directory: ./examples
        run: crystal build gl.cr
      - name: Build example "echo"
        working-directory: ./examples
        run: crystal build echo.cr
      - name: Run example "simple"
        working-directory: ./examples
        run: |
          ./simple & pid=$!
          sleep 3
          kill $pid
      - name: Run example "flippy_bird"
        working-directory: ./examples
        run: |
          ./flippy_bird & pid=$!
          sleep 3
          kill $pid
      - name: Run example "transformable"
        working-directory: ./examples
        run: |
          ./transformable & pid=$!
          sleep 3
          kill $pid
      - name: Run example "text_input"
        working-directory: ./examples
        run: |
          ./text_input & pid=$!
          sleep 3
          kill $pid
      - name: Run example "shader"
        working-directory: ./examples
        run: |
          ./shader & pid=$!
          sleep 3
          kill $pid
      - name: Run example "gl"
        working-directory: ./examples
        run: |
          ./gl & pid=$!
          sleep 3
          kill $pid
  job5:
    name: 'Windows: SFML 2.5.1, Crystal nightly'
    runs-on: windows-latest
    steps:
      - name: Download CrSFML source
        uses: actions/checkout@v2
      - name: Install Crystal
        uses: oprypin/install-crystal@v1
        with:
          crystal: nightly
      - name: Cache SFML
        id: cache-sfml
        uses: actions/cache@v1
        with:
          path: sfml
          key: sfml-2_5_1-windows-v4
      - name: Download SFML source
        if: steps.cache-sfml.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: SFML/SFML
          ref: 2.5.1
          path: sfml-src
      - name: Build SFML
        if: steps.cache-sfml.outputs.cache-hit != 'true'
        working-directory: ./sfml-src
        run: |
          cmake . -DCMAKE_INSTALL_PREFIX="$(pwd)/../sfml"
          cmake --build . --target install --config Release
      - name: Set up environment
        run: |
          echo "::set-env name=PATH::$(pwd)\sfml\bin;${env:PATH}"
          echo "::set-env name=LIB::$(pwd)\sfml\lib;${env:LIB}"
          echo "::set-env name=INCLUDE::$(pwd)\sfml\include;${env:INCLUDE}"
          echo "::set-env name=CRYSTAL_PATH::$(pwd)\..;${env:CRYSTAL_PATH}"
      - name: Re-generate sources
        run: crystal generate.cr "${env:GITHUB_WORKSPACE}\sfml\include"
      - name: Build CrSFML
        run: .\make
      - name: Validate freshness of generated files
        run: git diff --exit-code
      - name: Generate docs
        run: crystal doc
      - name: Run tests
        run: crystal spec
      - name: Build example "simple"
        working-directory: ./examples
        run: crystal build simple.cr
      - name: Build example "flippy_bird"
        working-directory: ./examples
        run: crystal build flippy_bird.cr
      - name: Build example "snakes"
        working-directory: ./examples
        run: crystal build snakes.cr
      - name: Build example "transformable"
        working-directory: ./examples
        run: crystal build transformable.cr
      - name: Build example "text_input"
        working-directory: ./examples
        run: crystal build text_input.cr
      - name: Build example "diagnostics"
        working-directory: ./examples
        run: crystal build diagnostics.cr
      - name: Build example "sound_capture"
        working-directory: ./examples
        run: crystal build sound_capture.cr
      - name: Build example "shader"
        working-directory: ./examples
        run: crystal build shader.cr
      - name: Build example "shapes"
        working-directory: ./examples
        run: crystal build shapes.cr
      - name: Build example "gl"
        working-directory: ./examples
        run: crystal build gl.cr
      - name: Build example "echo"
        working-directory: ./examples
        run: crystal build echo.cr
      - name: Run example "simple"
        working-directory: ./examples
        run: |
          $proc = start simple.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
      - name: Run example "flippy_bird"
        working-directory: ./examples
        run: |
          $proc = start flippy_bird.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
      - name: Run example "snakes"
        working-directory: ./examples
        run: |
          $proc = start snakes.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
      - name: Run example "transformable"
        working-directory: ./examples
        run: |
          $proc = start transformable.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
      - name: Run example "text_input"
        working-directory: ./examples
        run: |
          $proc = start text_input.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
      - name: Run example "diagnostics"
        working-directory: ./examples
        run: |
          $proc = start diagnostics.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
      - name: Run example "shader"
        working-directory: ./examples
        run: |
          $proc = start shader.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
      - name: Run example "shapes"
        working-directory: ./examples
        run: |
          $proc = start shapes.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
      - name: Run example "gl"
        working-directory: ./examples
        run: |
          $proc = start gl.exe -NoNewWindow -PassThru
          sleep 3
          Get-Process -Id $proc.Id
          kill $proc
